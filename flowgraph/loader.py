#
# This file is part of the GNU Radio LLM project.
#

import inspect

from importlib.util import spec_from_file_location, module_from_spec
from pathlib import Path

from typing import Any, Tuple, Type

from gnuradio.gr.top_block import top_block


def load_top_block(path: Path) -> Tuple[Any, Type[top_block]]:
    spec = spec_from_file_location('flowgraph_module', str(path))
    if spec is None or spec.loader is None:
        raise ImportError(f'Could not load flowgraph module from {path}')
    module = module_from_spec(spec)
    spec.loader.exec_module(module)

    # Try to find main()
    main_func = getattr(module, 'main', None)
    if main_func is None or not callable(main_func):
        raise ValueError('No main function found in flowgraph script')

    # Check the default arguments generated by GRC
    signature = inspect.signature(main_func)
    top_block_cls = None
    if 'top_block_cls' in signature.parameters:
        default = signature.parameters['top_block_cls'].default
        if inspect.isclass(default) and issubclass(default, top_block):
            top_block_cls = default

    if top_block_cls is None:
        raise ValueError('Could not infer top_block class from main signature')

    return (main_func, top_block_cls)
